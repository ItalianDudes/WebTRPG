// Versioning
def versionNumber = '0.0'
def versionType = 'DEV' // RELEASE | BETA | ALPHA | DEV
def versionMarker = versionType.charAt(0)
version = versionNumber+versionMarker

// Dependencies
dependencies {
    // Modules
    implementation project(':core')
    implementation project(':dnd5e')
    implementation project(':fallout')

    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Thymeleaf
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.4.0'

    // DevTools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

// Disabling default jar [use bootJar]
jar {
    enabled = false
}

// Specify to directly use sourceSets istead of copying it in 'build' during bootRun (useful to live-edit resources)
bootRun {
    sourceResources sourceSets.main
    classpath += files(project(":dnd5e").file("src/main/resources"))
    classpath += files(project(":fallout").file("src/main/resources"))
}

// BootJar Definition
bootJar {
    manifest {
        attributes "Title" : "WebTRPG"
        attributes "Vendor" : "ItalianDudes"
        attributes "Version" : archiveVersion.get()
        attributes "Version-Number" : archiveVersion.get()
        attributes "Version-Type" : versionType
        attributes "Version-Marker" : versionMarker
        attributes "Timestamp" : new Date().format("dd/MM/yyyy HH:mm:ss.sss")
    }
    archiveFileName = getRootDir().getName() + "-" + archiveVersion.get() + ".jar"
}

// Dev Tasks
tasks.register('runServer') {
    dependsOn bootRun
    group = "Execution"
    description = "Build, assemble and run the web server"
}

// Deployment Tasks
tasks.register('deployJar') {
    dependsOn bootJar
    group = "Deployment"
    description = "Build, assemble and deploy the web server as a fat-jar"
}